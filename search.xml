<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java自学线路</title>
    <url>/2019/09/08/Java%E8%87%AA%E5%AD%A6%E7%BA%BF%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><span id="more"></span>

<ul>
<li><p>编程语言：Java python c</p>
</li>
<li><p>基本算法</p>
</li>
<li><p>基本网络知识：tcp&#x2F;ip http&#x2F;https</p>
</li>
<li><p>基本的设计模式</p>
<h2 id="工具方面"><a href="#工具方面" class="headerlink" title="工具方面"></a>工具方面</h2></li>
<li><p>操作系统：linux (CentOS\Ubuntu\Fe..)</p>
</li>
<li><p>代码管理：svn&#x2F;git</p>
</li>
<li><p>持续集成(CI&#x2F;CD):jenkins</p>
</li>
<li><p>java的项目管理工具：maven&#x2F;gradle</p>
</li>
</ul>
<h2 id="框架方面"><a href="#框架方面" class="headerlink" title="框架方面"></a>框架方面</h2><h4 id="应用框架层"><a href="#应用框架层" class="headerlink" title="应用框架层"></a>应用框架层</h4><ul>
<li>ssh (spring+structs+hibernate)(已过时)</li>
<li>ssm:spring +springmvc+mybatis(流行)</li>
<li>spring boot</li>
</ul>
<h4 id="各种中间件"><a href="#各种中间件" class="headerlink" title="各种中间件"></a>各种中间件</h4><ul>
<li>MQ 消息队列</li>
<li>RPC 通讯框架 gRPC thrift dubbo springcloud</li>
<li>elasticsearch 数据库 搜索引擎</li>
</ul>
<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ul>
<li>SQL：mysql&#x2F;postgre sql</li>
<li>Nosql:redis memcached mongodb elasticsearch</li>
</ul>
<h2 id="架构方面"><a href="#架构方面" class="headerlink" title="架构方面"></a>架构方面</h2><h4 id="分布式-x2F-微服务架构"><a href="#分布式-x2F-微服务架构" class="headerlink" title="分布式&#x2F;微服务架构"></a>分布式&#x2F;微服务架构</h4><ul>
<li>spring cloud</li>
<li>dubbo</li>
<li>rpc通信</li>
</ul>
<h4 id="虚拟化-x2F-容器化的技术"><a href="#虚拟化-x2F-容器化的技术" class="headerlink" title="虚拟化&#x2F;容器化的技术"></a>虚拟化&#x2F;容器化的技术</h4><ul>
<li>Docker 容器化</li>
<li>k8s kubernetes</li>
</ul>
<h2 id="关注源码-x2F-性能"><a href="#关注源码-x2F-性能" class="headerlink" title="关注源码&#x2F;性能"></a>关注源码&#x2F;性能</h2><ul>
<li>jdk源码以及部分设计思想</li>
<li>Spring 源码 ioc容器 AOP</li>
<li>JVM 细节与排错</li>
<li>高并发&#x2F;高可用</li>
</ul>
<h2 id="技术书籍"><a href="#技术书籍" class="headerlink" title="技术书籍"></a>技术书籍</h2><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><ul>
<li><strong>java编程思想</strong></li>
<li>java并发编程实战</li>
<li>Effective Java</li>
<li><strong>深入理解java虚拟机</strong></li>
<li>函数式编程思维</li>
<li>tcp&#x2F;ip详解</li>
<li>鸟哥的linux私房菜</li>
<li>spring mvc ＋mybatis开发从入门到项目实战</li>
<li>spring技术内幕</li>
<li>elasticsearch服务器开发</li>
<li>redis入门指南</li>
</ul>
<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><ul>
<li>Essential C++</li>
<li>C++ Primer</li>
<li>Effective C++</li>
<li>More Effective C++</li>
<li>C++ 标准程序库</li>
<li>深度探索C++对象模型</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>《深入浅出Spring Boot 2.X》笔记</title>
    <url>/2022/05/23/%E3%80%8A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BASpring%20Boot%202.X%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="第-1-章-Spring-Boot-来临"><a href="#第-1-章-Spring-Boot-来临" class="headerlink" title="第 1 章 Spring Boot 来临"></a>第 1 章 Spring Boot 来临</h2><h3 id="1-1-Spring-Framework-历史"><a href="#1-1-Spring-Framework-历史" class="headerlink" title="1.1 Spring Framework 历史"></a>1.1 Spring Framework 历史</h3><p>EJB&#x2F;JSP&#x2F;Servlet -&gt; Spring</p>
<h3 id="1-2-注解还是-XML"><a href="#1-2-注解还是-XML" class="headerlink" title="1.2 注解还是 XML"></a>1.2 注解还是 XML</h3><p>JDK1.5、Spring 3.0 引入注解。控制层<code>@Controller</code> 业务层<code>@Service</code> 持久层<code>@Repository</code>，4.0 完全脱离 XML</p>
<h3 id="1-3-Spring-Boot-的优点"><a href="#1-3-Spring-Boot-的优点" class="headerlink" title="1.3 Spring Boot 的优点"></a>1.3 Spring Boot 的优点</h3><p>内嵌 Tomcat，Maven、自动配置</p>
<h3 id="1-4-Spring-MVC-和-Spring-Boot-对比"><a href="#1-4-Spring-MVC-和-Spring-Boot-对比" class="headerlink" title="1.4 Spring MVC 和 Spring Boot 对比"></a>1.4 Spring MVC 和 Spring Boot 对比</h3><h4 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h4><ol>
<li>配置 DispatcherServlet，配置 Spring IoC 容器，通过<code>web.xml</code> 或继承 <code>AbstractAnnotationConfigDispatcherServletInitializer</code></li>
<li>开发 Spring MVC 控制器</li>
<li>部署第三方服务器 Tomcat</li>
<li>开发 Spring MVC 应用</li>
</ol>
<h4 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h4><ol>
<li>官网或IDE配置，确认导入 AOP包<code>spring-boot-starter-aop</code> Spring MVC所需包内嵌Tomcat<code>spring-boot-starter-web</code>等依赖</li>
<li>开发 Spring Boot 应用</li>
</ol>
<hr>
<h2 id="第-2-章-聊聊开发环境搭建和基本开发"><a href="#第-2-章-聊聊开发环境搭建和基本开发" class="headerlink" title="第 2 章 聊聊开发环境搭建和基本开发"></a>第 2 章 聊聊开发环境搭建和基本开发</h2><h3 id="2-1-搭建-Spring-Boot-开发环境"><a href="#2-1-搭建-Spring-Boot-开发环境" class="headerlink" title="2.1 搭建 Spring Boot 开发环境"></a>2.1 搭建 Spring Boot 开发环境</h3><p>Eclipse&#x2F;<strong>IntelliJ IDEA</strong>，Eclips 安装 STS（Spring Tool Suite）插件</p>
<h3 id="2-2-Spring-Boot-的依赖和自动配置"><a href="#2-2-Spring-Boot-的依赖和自动配置" class="headerlink" title="2.2 Spring Boot 的依赖和自动配置"></a>2.2 Spring Boot 的依赖和自动配置</h3><p>Maven本地仓库路径<code>/maven-repo/org/springframework/boot</code>，仓库目录<code>spring-boot-starter-web</code>、<code>spring-boot-autoconfigure</code>，解压 jar 包子目录<code>org\springframework\boot\autoconfigure\web\servlet\</code>可以看到许多配置类</p>
<h3 id="2-3-使用自定义配置"><a href="#2-3-使用自定义配置" class="headerlink" title="2.3 使用自定义配置"></a>2.3 使用自定义配置</h3><p>根据需要引入对应的 starter。默认配置文件<code>application.properties</code>。修改 Tomcat 端口：<code>server.port=8090</code></p>
<h3 id="2-4-开发自己的-Spring-Boot-项目"><a href="#2-4-开发自己的-Spring-Boot-项目" class="headerlink" title="2.4 开发自己的 Spring Boot 项目"></a>2.4 开发自己的 Spring Boot 项目</h3><h4 id="Spring-MVC-开发"><a href="#Spring-MVC-开发" class="headerlink" title="Spring MVC 开发"></a>Spring MVC 开发</h4><p>修改 Spring MVC 的视图解析器 ViewResolver。ViewResolver 的作用是定位视图，当控制器返回逻辑名称时，需要视图解析器进行解析找到对应视图，常见视图是JSP。</p>
<ol>
<li>在<code>pom.xml</code>增加 JSP 和 JSTL 的 Maven 依赖配置</li>
<li><code>application.properties</code>定义视图前后缀<code>spring.mvc.view.prefix=/WEB-INF/jsp/</code> <code>spring.mvc.view.suffix=.jsp</code></li>
<li>新建 <code>IndexController</code> 给出文件名映射路径</li>
</ol>
<h4 id="Spring-Boot-开发"><a href="#Spring-Boot-开发" class="headerlink" title="Spring Boot 开发"></a>Spring Boot 开发</h4><p>@SpringBootApplication</p>
<hr>
<h2 id="第-3-章-全注解下的-Spring-IoC"><a href="#第-3-章-全注解下的-Spring-IoC" class="headerlink" title="第 3 章 全注解下的 Spring IoC"></a>第 3 章 全注解下的 Spring IoC</h2><p>原生 Java 通过 new 关键字创建对象<br>IoC：通过 xml 或注解描述来生成或者获取对象<br>依赖注入 DI：通过描述来管理各个对象之间的关系<br>Spring Bean：每个需要管理的对象<br>IoC 容器：通过描述管理、发布、获取 Bean，完成 Bean 之间的依赖关系</p>
<h3 id="3-1-IoC-容器简介"><a href="#3-1-IoC-容器简介" class="headerlink" title="3.1 IoC 容器简介"></a>3.1 IoC 容器简介</h3><p>所有 IoC 容器需要实现接口<code>BeanFactory</code></p>
<h4 id="BeanFactory-源码分析"><a href="#BeanFactory-源码分析" class="headerlink" title="BeanFactory 源码分析"></a>BeanFactory 源码分析</h4><p>多个按照类型或名称获取 Bean 的**<code>getBean()</code>方法**<br>默认 Bean 都是以单例存在，使用 getBean() 方法返回同一个对象，单例相反的是原型<br><code>ApplicationContext</code>是<code>BeanFactory</code>重要子接口，扩展了多种功能，开发中大部分 IoC 容器是<code>ApplicationContext</code>接口的实现类<br>基于注解的 IoC 容器**<code>AnnotationConfigApplicationContext</code>**</p>
<ol>
<li>定义POJO( Java 简单对象)</li>
<li>定义 Java 配置文件<code>AppConfig.java</code>，@Configuration 代表这是 Java 配置文件，@Bean 创建 Bean</li>
<li>使用<code>AnnotationConfigApplicationContext</code>构建 IoC 容器</li>
</ol>
<h3 id="3-2-装配你的-Bean"><a href="#3-2-装配你的-Bean" class="headerlink" title="3.2 装配你的 Bean"></a>3.2 装配你的 Bean</h3><h4 id="3-2-1-通过扫描装配你的-Bean"><a href="#3-2-1-通过扫描装配你的-Bean" class="headerlink" title="3.2.1 通过扫描装配你的 Bean"></a>3.2.1 通过扫描装配你的 Bean</h4><blockquote>
<p>使用@Bean 一个个注入 IoC 容器非常麻烦<br><strong>@Component(常用)</strong> 标明哪个类被扫描，默认将类名第一个字母小写其他不变作为 Bean 名称放入 IoC 容器，可以自定义配置字符串，@Value 注入对应值<br><strong>@ComponentScan</strong> 标明采用何种策略扫描装配 Bean，扫描所在当前类和子包</p>
</blockquote>
<h4 id="ComponentScan-源码"><a href="#ComponentScan-源码" class="headerlink" title="ComponentScan 源码"></a>ComponentScan 源码</h4><p>Filter 过滤器</p>
<h4 id="3-2-2-自定义第三方-Bean"><a href="#3-2-2-自定义第三方-Bean" class="headerlink" title="3.2.2 自定义第三方 Bean"></a>3.2.2 自定义第三方 Bean</h4><p>定义 DBCP 数据源依赖</p>
<h3 id="3-3-依赖注入"><a href="#3-3-依赖注入" class="headerlink" title="3.3 依赖注入"></a>3.3 依赖注入</h3><p>抽象接口由具体的实例注入<br>**@Autowired(重要!)**：根据属性的类型(by type)找到对应 Bean 进行注入</p>
<h4 id="3-3-1-注解-Autowired"><a href="#3-3-1-注解-Autowired" class="headerlink" title="3.3.1 注解@Autowired"></a>3.3.1 注解@Autowired</h4><blockquote>
<p>IoC 容器顶级接口 BeanFactory 中的 getBean()方法支持根据类型(by type)和根据名称(by name)</p>
</blockquote>
<h4 id="3-3-2-消除歧义性-Primary-和-Qualifier"><a href="#3-3-2-消除歧义性-Primary-和-Qualifier" class="headerlink" title="3.3.2 消除歧义性--@Primary 和@Qualifier"></a>3.3.2 消除歧义性--@Primary 和@Qualifier</h4><p>@Primary 修改优先权<br>@Qualifier 指定实现类</p>
<h3 id="3-4-生命周期-重要"><a href="#3-4-生命周期-重要" class="headerlink" title="3.4 生命周期(重要)"></a>3.4 生命周期(重要)</h3><p>Bean 的生命周期：IoC 初始化过程和销毁 Bean 的过程</p>
<ol>
<li>Bean 定义<ul>
<li>资源定位@Component</li>
<li>解析并保存定义的信息</li>
<li>将 Bean 定义发布到 IoC 容器</li>
</ul>
</li>
<li>Bean 初始化<ul>
<li>Bean 实例生成，完成依赖注入，创建 Bean 实例化对象，@Autowired 注入各类资源</li>
</ul>
</li>
<li>Bean 生存期<ul>
<li>初始化-&gt;依赖注入-&gt;接口 BeanNameAware 到 setBeanName() 方法-&gt;接口 BeanFactoryAware 的 setBeanFactory()方法-&gt;接口 ApplicationContextAware(需要容器实现 ApplicationContext 接口)的 setApplicationContext()方法-&gt;BeanPostProcessor 的预初始化方法 postProcessBeforeInitialization()方法-&gt;@PostConstruct 标注方法 自定义初始化方法-&gt;接口 InitializingBean 的 afterPropertiesSet()方法-&gt;BeanPostProcessor 的后初始化方法 postProcessAfterInitialization()方法-&gt;生存期-&gt;@PreDestroy 标注方法 自定义销毁方法-&gt;接口 DisposableBean 的 destroy()方法</li>
</ul>
</li>
<li>Bean 销毁</li>
</ol>
<h3 id="3-5-使用属性文件"><a href="#3-5-使用属性文件" class="headerlink" title="3.5 使用属性文件"></a>3.5 使用属性文件</h3><p>属性文件依赖<code>spring-boot-configuration-processor</code>，有了依赖就可以直接使用<code>application.properties</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置属性</span></span><br><span class="line">database.driverName=com.mysql.jdbc.Driver</span><br><span class="line">database.url=jdbc:mysql:<span class="comment">//localhost:3306/chapter3</span></span><br><span class="line">database.username=root</span><br><span class="line">database.password=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用属性配置，以 driverName 为例</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;database.driverName&#125;&quot;)</span></span><br></pre></td></tr></table></figure>

<p>@ConfigurationProperties 自定义字符串用以匹配配置文件<br>@PropertySource 载入属性文件<code>@PropertySource(value=&#123;&quot;classpath:jdbc.properties&quot;&#125;，ignoreResourceNotFound=true)</code>，默认值 false 没有找到属性文件就报错，配置为 true 找不到属性文件就忽略 不会报错</p>
<h3 id="3-6-条件装配-Bean"><a href="#3-6-条件装配-Bean" class="headerlink" title="3.6 条件装配 Bean"></a>3.6 条件装配 Bean</h3><blockquote>
<p>数据库连接池若漏掉一些配置导致数据源不能连接，即 Bean 无法初始化，此时 IoC 容器进行数据源装配会抛出异常<br>@Conditional 和接口 Condition 解决上述问题。Condition 要求实现 matches 方法</p>
</blockquote>
<h3 id="3-7-Bean-的作用域"><a href="#3-7-Bean-的作用域" class="headerlink" title="3.7 Bean 的作用域"></a>3.7 Bean 的作用域</h3><p>Bean 存在单例 Singleton 和原型 Prototype 两种作用域，Spring IoC 容器默认 Bean 以单例存在，若 isPrototype 返回 true 则每次获取 Bean 时 IoC 容器都会创建一个新的 Bean<br>Web 容器 4 种作用域：页面 page(JSP 支持，Spring 无法支持)、请求 request、会话 session、应用 application<br>@Scope</p>
<h3 id="3-8-使用-Profile"><a href="#3-8-使用-Profile" class="headerlink" title="3.8 使用@Profile"></a>3.8 使用@Profile</h3><p>项目中的 4 套环境：</p>
<ul>
<li>开发环境</li>
<li>测试环境</li>
<li>准生成环境(用于模拟真实生产环境部署)</li>
<li>生产环境<br>  Profile 机制方便各个环境的切换</li>
</ul>
<h3 id="3-9-引入-XML-配置-Bean"><a href="#3-9-引入-XML-配置-Bean" class="headerlink" title="3.9 引入 XML 配置 Bean"></a>3.9 引入 XML 配置 Bean</h3><p>@ImportResource 引入对应 XML 文件用以加载 Bean，有些框架(例如 Dubbo)基于 Spring 的 XML 方式开发，需要引入 XML</p>
<h3 id="3-10-使用-Spring-EL"><a href="#3-10-使用-Spring-EL" class="headerlink" title="3.10 使用 Spring EL"></a>3.10 使用 Spring EL</h3><p>Spring EL 是 Spring 的表达式语言，可以方便装配 Bean<br><code>@Value(&quot;#&#123;T(System).currentTimeMillis()&#125;&quot;)</code></p>
<hr>
<h2 id="第-4-章-开始约定编程–Spring-AOP"><a href="#第-4-章-开始约定编程–Spring-AOP" class="headerlink" title="第 4 章 开始约定编程–Spring AOP"></a>第 4 章 开始约定编程–Spring AOP</h2><blockquote>
<p>约定编程：记住约定的流程，将代码织入事先约定的流程中完成对应的任务，不需要知道底层设计者是怎么实现的</p>
</blockquote>
<h3 id="4-1-约定编程"><a href="#4-1-约定编程" class="headerlink" title="4.1 约定编程"></a>4.1 约定编程</h3><p>拦截器接口 Interceptor 的 around 方法中，参数 Invocation 对象的 proceed 方法以反射的形式调用原方法</p>
<h4 id="ProxyBean-类"><a href="#ProxyBean-类" class="headerlink" title="ProxyBean 类"></a>ProxyBean 类</h4><p>动态代理：proxy 增强或控制对 target 的访问<br>代理对象的 3 个参数：</p>
<ul>
<li>classLoader 类加载器</li>
<li>interfaces 绑定接口</li>
<li><strong>invocationHandler</strong> 绑定代理对象逻辑实现，是接口 InvocationHandler 对象，定义了一个 invoke 方法实现代理对象的逻辑</li>
</ul>
<h3 id="4-2-AOP"><a href="#4-2-AOP" class="headerlink" title="4.2 AOP"></a>4.2 AOP</h3><p>**@AspectJ **</p>
<h4 id="4-2-1-为什么使用-AOP"><a href="#4-2-1-为什么使用-AOP" class="headerlink" title="4.2.1 为什么使用 AOP"></a>4.2.1 为什么使用 AOP</h4><ul>
<li>典型应用：数据库事务管控。例如数据库事务 保存用户和角色信息，OOP 无能为力</li>
<li>减少大量重复工作，JDBC 的数据库操作，例如数据库打开和关闭以及事务的提交和回滚，使用 @Transactional 都有流程默认实现</li>
</ul>
<h4 id="4-2-2-AOP-术语和流程"><a href="#4-2-2-AOP-术语和流程" class="headerlink" title="4.2.2 AOP 术语和流程"></a>4.2.2 AOP 术语和流程</h4><ul>
<li>连接点 join point：具体被拦截的对象，Spring 只支持方法，所以被拦截的对象指的是确定某个类的某个方法，AOP 通过动态代理将它织入流程中</li>
<li>目标对象 target：被代理对象</li>
<li><strong>切面 aspect</strong>：可以定义切点、通知、引入的内容，AOP 通过它的信息来增强 Bean 的功能或者将对应方法织入流程</li>
<li>切点 point cut：切面可能有多个类的不同方法，通过正则式和指示器的规则定义后适配连接点</li>
<li>通知 advice：按照约定的流程下的方法<ul>
<li>前置通知 before advice</li>
<li>后置通知 after advice</li>
<li>环绕通知 around advice</li>
<li>返回通知 afterReturning advice</li>
<li>异常通知 afterThrowing advice</li>
</ul>
</li>
<li>引入 introduction：引入新的类和方法，增强现有 Bean 的功能</li>
<li><strong>织入 weaving</strong>：通过动态代理技术，为原有服务对象生成代理对象，然后将与切点定义匹配的连接点拦截，并按约定将各类通知织入约定流程的过程</li>
</ul>
<h4 id="Spring-AOP-流程约定"><a href="#Spring-AOP-流程约定" class="headerlink" title="Spring AOP 流程约定"></a>Spring AOP 流程约定</h4><p>连接点-&gt;通过动态代理对象织入切面-&gt;前置通知-&gt;环绕通知 反射连接点方法-&gt;后置通知-&gt;判断是否发生异常-&gt;异常通知或返回通知</p>
<h3 id="4-3-AOP-开发详解"><a href="#4-3-AOP-开发详解" class="headerlink" title="4.3 AOP 开发详解"></a>4.3 AOP 开发详解</h3><p><strong>Spring AOP 只能对方法进行拦截</strong>，首先要确定拦截什么方法才能让它织入约定的流程</p>
<h4 id="4-3-1-确定连接点"><a href="#4-3-1-确定连接点" class="headerlink" title="4.3.1 确定连接点"></a>4.3.1 确定连接点</h4><h4 id="4-3-2-开发切面"><a href="#4-3-2-开发切面" class="headerlink" title="4.3.2 开发切面"></a>4.3.2 开发切面</h4><p>@Aspect 切面声明，通过@Before @After @AfterReturning @AfterThorwing 定义各类通知</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(*com.springboot.chapter4.aspect.service.impl.UserServiceImpl.printUser(...))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@After(&quot;execution(*com.springboot.chapter4.aspect.service.impl.UserServiceImpl.printUser(...))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-3-切点定义"><a href="#4-3-3-切点定义" class="headerlink" title="4.3.3 切点定义"></a>4.3.3 切点定义</h4><p>Spring 通过正则式匹配确定连接点是否启用 AOP，重复写同一个正则式比较冗余<br>使用切点 @Pointcut 向 Spring 描述哪些类的哪些方法需要启用 AOP</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(*com.springboot.chapter4.aspect.service.impl.UserServiceImpl.printUser(...))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Before(&quot;pointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@After(&quot;pointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-4-测试-AOP"><a href="#4-3-4-测试-AOP" class="headerlink" title="4.3.4 测试 AOP"></a>4.3.4 测试 AOP</h4><p>@Controller 定义控制器<br>@RequestMapping 定义类请求路径<br>@Autowired 注入用户服务<br>@ResponseBody 转换为 JSON 格式<br>@SpringBootApplication 指定扫描包<br>@Bean 定义切面<br>SpringApplication.run() 启动切面</p>
<h4 id="4-3-5-环绕通知-Around"><a href="#4-3-5-环绕通知-Around" class="headerlink" title="4.3.5 环绕通知 Around"></a>4.3.5 环绕通知 Around</h4><p>使用场景：需要大幅度修改原有目标对象的服务逻辑<br>取代原有目标对象方法的通知，提供回调原有目标对象方法的能力</p>
<h4 id="4-3-6-引入"><a href="#4-3-6-引入" class="headerlink" title="4.3.6 引入"></a>4.3.6 引入</h4><p>@DeclareParents 引入新的类来增强服务，必须配置属性 value 和 defaultImpl</p>
<ul>
<li>value：指向要增强的目标对象</li>
<li>defaultImpl：引入增强功能的类</li>
</ul>
<h4 id="4-3-7-通知获取参数"><a href="#4-3-7-通知获取参数" class="headerlink" title="4.3.7 通知获取参数"></a>4.3.7 通知获取参数</h4><p>在前置通知中使用正则式获取参数</p>
<h4 id="4-3-8-织入"><a href="#4-3-8-织入" class="headerlink" title="4.3.8 织入"></a>4.3.8 织入</h4><p>织入：生成动态代理对象并且将切面和目标对象方法编织成为约定流程的过程<br>Spring 动态代理实现方式：</p>
<ul>
<li>JDK 接口 + 实现类，要求被代理的目标对象必须要有接口</li>
<li>CGLIB</li>
</ul>
<h3 id="4-4-多个切面"><a href="#4-4-多个切面" class="headerlink" title="4.4 多个切面"></a>4.4 多个切面</h3><p>运行顺序：</p>
<ol>
<li>定义多个切面</li>
<li>定义连接点</li>
<li>控制器测试多个切面</li>
<li>创建多个切面实例</li>
<li>指定多个切面的顺序</li>
<li>使用 Ordered 接口 或 @Order 定义切面顺序</li>
</ol>
<hr>
<h2 id="第-5-章-访问数据库"><a href="#第-5-章-访问数据库" class="headerlink" title="第 5 章 访问数据库"></a>第 5 章 访问数据库</h2><p>JDBC-&gt;EJB-&gt;Hibernate-&gt;JPA 规范-&gt;MyBatis<br>Spring Boot 默认的 JPA 实现是 Hibernate</p>
<h3 id="5-1-配置数据源"><a href="#5-1-配置数据源" class="headerlink" title="5.1 配置数据源"></a>5.1 配置数据源</h3><p><code>spring-boot-starter-data-jpa</code>依赖默认配置数据源</p>
<h4 id="5-1-1-启动默认数据源"><a href="#5-1-1-启动默认数据源" class="headerlink" title="5.1.1 启动默认数据源"></a>5.1.1 启动默认数据源</h4><p>引入内嵌数据库 h2 依赖</p>
<h4 id="5-1-2-配置自定义数据源-MySQL"><a href="#5-1-2-配置自定义数据源-MySQL" class="headerlink" title="5.1.2 配置自定义数据源(MySQL)"></a>5.1.2 配置自定义数据源(MySQL)</h4><ol>
<li>删去 h2 的依赖，保留 jpa 依赖，增加 MySQL 依赖</li>
<li>配置数据源，修改 application.properties 配置文件<br> 建表 SQL，创建 POJO 与之对应</li>
</ol>
<h3 id="5-2-使用-JDBC-Template-操作数据库"><a href="#5-2-使用-JDBC-Template-操作数据库" class="headerlink" title="5.2 使用 JDBC Template 操作数据库"></a>5.2 使用 JDBC Template 操作数据库</h3><p>Spring Boot 自动配置来 JDBC Template，实际工作中使用更多是 MyBatis</p>
<ol>
<li>创建 Service 接口</li>
<li>实现用户接口</li>
</ol>
<h3 id="5-3-使用-JPA-Hibernate-操作数据"><a href="#5-3-使用-JPA-Hibernate-操作数据" class="headerlink" title="5.3 使用 JPA(Hibernate)操作数据"></a>5.3 使用 JPA(Hibernate)操作数据</h3><p>JPA(Java Persistence API) Java 持久化 API：定义了对象关系映射 ORM 以及实体对象持久化的标准接口，是作为 POJO 持久化的标准规范</p>
<h4 id="5-3-1-概述"><a href="#5-3-1-概述" class="headerlink" title="5.3.1 概述"></a>5.3.1 概述</h4><p>JPA 核心是实体 Entity Bean，通过持久化上下文使用，持久化上下文包括 3 个部分：</p>
<ol>
<li>对象关系映射 ORM 描述(注解或 XML)</li>
<li>实体操作 API，CRUD</li>
<li>查询语句</li>
</ol>
<h4 id="5-3-2-开发-JPA"><a href="#5-3-2-开发-JPA" class="headerlink" title="5.3.2 开发 JPA"></a>5.3.2 开发 JPA</h4><p>@Entity 标明这是一个实体类<br>@Table 定义映射数据库中的表<br>@Id 标明主键<br>@GeneratedValue 配置采用何种主键策略、递增<br>@Column 定义属性和表的映射关系<br>@Convert 定义转换器，从数据库读出的转换规则和从属性转换为数据库列的规则</p>
<h4 id="Repository-接口"><a href="#Repository-接口" class="headerlink" title="Repository 接口"></a>Repository 接口</h4><p>继承关系：Repository-&gt;CrudRepository-&gt;PagingAndSortingRepository-&gt;JpaRepository-&gt;QueryByExampleExecutor<br>JPA 顶级接口是 <code>Repository</code>，没有定义任何方法，其子接口 <code>CrudRepository</code> 定义实体最基本的增删改的操作；<code>PagingAndSortingRepository</code> 继承并提供分页和排序功能；最后的接口提供按例查询的功能<br>@EnableJpaRepositories 扫描 JPA 接口启动 JPA 编程<br>@EntityScan 扫描实体 Bean</p>
<h3 id="5-4-整合-MyBatis-框架-重要"><a href="#5-4-整合-MyBatis-框架-重要" class="headerlink" title="5.4 整合 MyBatis 框架(重要!)"></a>5.4 整合 MyBatis 框架(重要!)</h3><p>MyBatis 更加关注大数据、高并发、性能问题，因此 JPA 没落了</p>
<h4 id="5-4-1-MyBatis-简介"><a href="#5-4-1-MyBatis-简介" class="headerlink" title="5.4.1 MyBatis 简介"></a>5.4.1 MyBatis 简介</h4>]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>博客部署</title>
    <url>/2022/03/04/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h3 id="Hexo-部署"><a href="#Hexo-部署" class="headerlink" title="Hexo 部署"></a>Hexo 部署</h3><blockquote>
<p>  <a href="https://www.bilibili.com/video/BV1Yb411a7ty?p=1&amp;t=235%EF%BC%8C%E9%A2%84%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%97%B6%E5%86%85%E6%90%AD%E5%BB%BA">https://www.bilibili.com/video/BV1Yb411a7ty?p=1&amp;t=235，预计一个小时内搭建</a></p>
</blockquote>
<span id="more"></span>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动博客</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="comment">#创建以“我的博客”为名的博客文章</span></span><br><span class="line">hexo n “我的博客”</span><br><span class="line"><span class="comment">#清理</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment">#生成hexo</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment">#部署远端</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>



<h3 id="博客日常使用步骤"><a href="#博客日常使用步骤" class="headerlink" title="博客日常使用步骤"></a>博客日常使用步骤</h3><ol>
<li>hexo n “name” 生成文章</li>
<li>在 source\_posts 中修改文章内容并保存</li>
<li>clean、g、d 即可</li>
</ol>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ol>
<li>安装node.js、npm、cnpm、换源</li>
<li>修改 _config.yml 文件</li>
<li>设置 git 邮件用户名、ssh等</li>
</ol>
<h5 id="样式主题推荐"><a href="#样式主题推荐" class="headerlink" title="样式主题推荐"></a>样式主题推荐</h5><p><a href="https://github.com/theme-next/hexo-theme-next">hexo-theme-next</a> </p>
<h3 id="Next-样式主题设置"><a href="#Next-样式主题设置" class="headerlink" title="Next 样式主题设置"></a>Next 样式主题设置</h3><p>官方文档：<a href="https://theme-next.js.org/docs/getting-started/">https://theme-next.js.org/docs/getting-started/</a></p>
<p>中文文档： <a href="http://theme-next.iissnan.com/">http://theme-next.iissnan.com/</a></p>
<p>视频： <a href="https://www.bilibili.com/video/BV16W411t7mq">https://www.bilibili.com/video/BV16W411t7mq</a></p>
<p><strong>站点配置文件</strong>：站点根目录下 <code>_config.yml</code> 文件，修改后需要重启 hexo 才能看到效果</p>
<p><strong>主题配置文件</strong>：next 主题目录下的 <code>_config.yml</code> 文件，不需要重启服务，直接刷新浏览器就可以看到效果</p>
<h5 id="更改中文"><a href="#更改中文" class="headerlink" title="更改中文"></a>更改中文</h5><p>站点配置文件 的 <code>language: en</code> 改为 <code>language: zh-CN</code></p>
<h5 id="增加标签页"><a href="#增加标签页" class="headerlink" title="增加标签页"></a>增加标签页</h5><blockquote>
<p>  以下操作以添加tags标签页为例，将 tags 改为 about、categories 等即可添加对应标签页</p>
</blockquote>
<ol>
<li>修改主题配置文件，找到 <code>menu:</code> 字段，将对应标签页的#删掉</li>
</ol>
<p><img src="/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2.assets/image-20220318173910002.png" alt="image-20220318173910002"></p>
<ol start="2">
<li><p>命令行输入 <code>hexo n page tags</code> ，将会在 source 目录下生成 tags 目录</p>
</li>
<li><p>修改 tags 目录下 <strong>index.md</strong> 文件，修改title，添加 <code>type: &quot;tags&quot;</code></p>
<p><img src="/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2.assets/image-20220318174801133.png" alt="image-20220318174801133"></p>
</li>
<li><p>最终效果：</p>
<img src="博客部署.assets/image-20220318175000922.png" alt="image-20220318175000922" style="zoom:50%;" /></li>
</ol>
<h5 id="修改主题布局"><a href="#修改主题布局" class="headerlink" title="修改主题布局"></a>修改主题布局</h5><p>修改next主题目录配置文件 <code>scheme</code> 字段</p>
<p><img src="/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2.assets/image-20220318180251759.png" alt="image-20220318180251759"></p>
<p>效果：</p>
<img src="博客部署.assets/image-20220318180951105.png" alt="image-20220318180951105" style="zoom:30%;" />

<h5 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h5><p>编辑 <strong>主题配置文件</strong>， 修改字段 <code>avatar</code>，支持本地和网络 URI</p>
<img src="博客部署.assets/image-20220318182137251.png" alt="image-20220318182137251" style="zoom:33%;" />

<h5 id="添加和自定义社交链接、友链"><a href="#添加和自定义社交链接、友链" class="headerlink" title="添加和自定义社交链接、友链"></a>添加和自定义社交链接、友链</h5><p>编辑 <strong>主题配置文件</strong>， 修改字段 <code>social</code></p>
<p>可自定义添加其他社交链接，比如哔哩哔哩，参考文章：<a href="https://blog.csdn.net/lu_embedded/article/details/114181462">https://blog.csdn.net/lu_embedded/article/details/114181462</a> （存在问题，先放着）</p>
<img src="博客部署.assets/image-20220318183123978.png" alt="image-20220318183123978" style="zoom:50%;" />

<p><a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a>)</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>知识星球收获总结</title>
    <url>/2022/04/23/%E7%9F%A5%E8%AF%86%E6%98%9F%E7%90%83%E6%94%B6%E8%8E%B7%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="知识星球收获总结"><a href="#知识星球收获总结" class="headerlink" title="知识星球收获总结"></a>知识星球收获总结</h3><p> Java 后端开发下面几点是最基本的： </p>
<span id="more"></span>

<ol>
<li>具备独立开发基本的增删改查代码的能力（不看视频自己写，浏览器搜索直接复制粘贴都行，只要你能把功能做完）</li>
<li>具备能够排查项目遇到的简单 Bug 的能力。</li>
<li>具备使用 Git 进行版本管理和团队协作的能力。</li>
<li>熟练使用常用的关系型数据库（不同的公司，不同的项目，使用的关系型数据库也不同，一般是 MySQL）</li>
<li>可以运用多线程、设计模式等手段来优化代码</li>
<li>具备和前端开发联调的能力</li>
<li>了解 Linux 常用命令,以及在其上面安装，部署应用</li>
<li>具备良好的沟通能力和学习能力，能够快速学习运用自己之前没有了解过的框架。</li>
</ol>
<hr>
<p>刚学完 Java 基础就让你做项目确实有点难为你了，这样的日子你可能还要经历至少1个多月，调整好自己的心态。 下面是一些建议： </p>
<ol>
<li>Spring 全家桶范围太大，你可能并没有搞清楚你的公司的项目具体用到了其中的哪些模块。因此，你首先要搞清楚公司的技术栈到底是什么，这样才能针对性地学习。</li>
<li>假设你们用的是 Spring Boot +MyBatis +Spring Security ，那你就应该抽时间去重点学习一下  Spring Boot  如何整合 MyBatis 实现最基本的增删改查、分页、连表查询等等。Spring Security 这个入门难度比较大，不建议你现在学，一般也不会让你这种新人做。</li>
</ol>
<hr>
<p>老哥，我讲讲我的几点建议吧。 </p>
<ol>
<li>心态要放好。领导骂你，又不是不发工资。 </li>
<li>世故一点。遇到经过自己思考还是搞不定的问题，去向前辈或高手们请教。买个饮料，吃顿饭多拉拉关系。 </li>
<li>一定要多总结。公司用的框架体系，业务逻辑都是需要自己来总结的。框架一般公司都会成体系的，总结下来后，去搜索xxx入门，或者去Github，gitee上搜xxx demo，比较与公司对同一逻辑的写法。遇到具体的知识点就去浏览器检索，20个tab理论（遇到不会的就关键词新打开一个tab)。 最后，祝老哥早日走出阴霾，好好享受这段时光。这会是你进步很快的一段时光的。加油吧</li>
</ol>
<hr>
<p>没必要焦虑，做好自己该做的就好，每个人选择的方向不同，每个人想走的路不同，要相信，面包总会到来的！</p>
<p>工作中常用到的，普通索引，唯一索引，联合索引还有主键索引。</p>
<p>“去还是不去的时候，去；买还是不买的时候，不要买；说还是不说的时候，不要说；给还是不给的时候，给；吃还是不吃的时候，别吃。” 去或不去时，是因为缺乏勇气和决心，所以还是去吧。 买或不买时，至少说明不是必要的，所以不要买吧。 说或不说时，说明说了有害处，所以还是沉默吧。 给或不给时，起了私心了，还是给吧。</p>
<hr>
<p>看了<a href="https://www.cnblogs.com/lovesqcc/p/16015741.html">如何做编程知识投资及减少知识失效的影响 - 琴水玉 - 博客园</a>这篇文章感触挺深的，与我之前分享的观点类似。一定要多看这类文章来提醒自己，因为人是有惰性的，并且，基础和原理性的知识通常会让我们走出自己的舒适区。 回想起来，我这几年也并没有做到知行合一。经常记下了要研究 xx 技术的原理或者回顾基础知识，后面因为各种事情就不了了之了。 <strong>总之，一定不要把自己的精力都花在各种工具库、框架和中间件的使用以及配置上！</strong>从投资角度来说，这些东西的投资价值并不高，有很大概率过几年就过时或者被淘汰了。举点例子：Struts2 被 Spring 干掉、Spring 又被 Spring Boot 替代、ActiveMQ 被 Kafka，RabbitMQ等优秀的消息队列干掉，太多太多这样的例子了。就算是 Spring Boot 目前依然存在着被其他框架替代的可能性，没有什么永恒不变，尤其对于工具库、框架和中间件来说。 不过，这些工具库和中间件的底层原理还是值得学习的。 技术方面，我们应该投资计算机技术基础知识、优秀的编码实践、系统设计、设计模式、各种技术的原理，定位问题的能力等等。 非技术方面，我们应该投资业务的理解能力、抗压能力、表达能力等等。 <strong>基础以及原理性的知识一般不会被淘汰，只会被更先进的技术给颠覆。</strong></p>
<hr>
<p>如果是坚定了想考，并且意志力强的话就坚定坚持就好了，考研并不太看天赋,看的是努力，用正确的方法坚持到最后肯定能有不错的成绩。如果是在找工作和考研之间徘徊，或者意志不够坚定，学到中途可能就放弃（身边这样的例子很多），建议还是先找工作，大二学习一下技术，去找个实习，大三下学期的生活巩固技术为主，可以稍微复习一下高数和英语，然后在秋招先找一个满意的岗位，剩下的时间冲刺一下考研，我室友基本没复习之前也是0基础，但是八月底才开始复习，也过线了，考的也是985。就算没过，寒假也继续丰富自己，再冲刺一下工作。当然，这是我想象中如果我能重来我会怎么过，每个人情况不同也不一定有用，希望能给需要的人一点参考意见。 最重要的是要一直努力！希望大家都前程似锦！加油！</p>
<hr>
<p>我今年二战进入复试，由于没重视复试，惨遭被刷，专硕分又不高，目前无书可读，又没有工作出路。真的不要太赞同你的看法了，现在所有的焦虑都是以前的不努力，时间是公平的。希望在接下来的一个月里面找到一份工作能缓解我的焦虑，我要先养活我自己</p>
<hr>
<p>我：最近想系统学习分布式的知识，有什么好的学习资料推荐？ 咔咔咔，一堆搜索。。。 看来大家首推《MIT 6.824》啊！ 咔咔咔，B站打开课程视频 看完第一节课前20分钟，发现要有如下基础： 1. 请先看完 Google 的三大论文； 2. 实验要用 Golang 写，所以请先学习 Golang； 3. 共识算法领域的论文–Raft&#x2F;Paxos等要看 4. 。。。。 麻了麻了。分布式水太深，不过，不是求职分布式相关的岗位的话，面试中应该不会问太深的东西。准备面试的话只需要把自己最想用的一些分布式中间件使用到的分布式算法&#x2F;协议搞懂即可，比如Redis的Gossip协议，ZK的zab协议。</p>
<hr>
<p>分享几点个人读书心得： </p>
<ol>
<li>找到适合自己阅读的书并且不要逼迫自己读书，要试着去享受的读书的过程。 </li>
<li>先看目录了解书籍大致的信息，做到心里有数！ </li>
<li>又不是文科，没必要一字一字的咀嚼，这样太浪费时间！适当加快阅读的速度！ </li>
<li>读书之前可以带着一些问题，你可以慢慢在书中寻找答案。 </li>
<li>读书之后问问自己到底有什么收获</li>
<li>对于内容太多的书籍，你可以选择自己需要的章节进行阅读。</li>
</ol>
]]></content>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
</search>
